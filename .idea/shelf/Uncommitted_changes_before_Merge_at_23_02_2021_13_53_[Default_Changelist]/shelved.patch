Index: app/src/main/java/id/calocallo/sicape/ui/main/lp/pasal/PickPasalActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package id.calocallo.sicape.ui.main.lp.pasal\r\n\r\nimport android.content.Intent\r\nimport android.graphics.Color\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.Menu\r\nimport android.view.MenuInflater\r\nimport android.view.MenuItem\r\nimport android.widget.Toast\r\nimport androidx.appcompat.view.ActionMode\r\nimport androidx.appcompat.widget.SearchView\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.recyclerview.selection.SelectionPredicates\r\nimport androidx.recyclerview.selection.SelectionTracker\r\nimport androidx.recyclerview.selection.StorageStrategy\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport com.github.razir.progressbutton.*\r\nimport com.orhanobut.logger.AndroidLogAdapter\r\nimport com.orhanobut.logger.Logger\r\nimport id.calocallo.sicape.network.response.PasalResp\r\nimport id.calocallo.sicape.ui.main.lp.pasal.tes.PasalTesDetailsLookup\r\nimport id.calocallo.sicape.R\r\nimport id.calocallo.sicape.network.NetworkConfig\r\nimport id.calocallo.sicape.network.request.*\r\nimport id.calocallo.sicape.network.response.Base1Resp\r\nimport id.calocallo.sicape.network.response.DokLpResp\r\nimport id.calocallo.sicape.ui.main.lp.disiplin.ListLpDisiplinActivity\r\nimport id.calocallo.sicape.ui.main.lp.pasal.tes.PasalTesAdapter\r\nimport id.calocallo.sicape.ui.main.lp.pasal.tes.PasalTesItemKeyProvider\r\nimport id.calocallo.sicape.ui.main.lp.saksi.PickSaksiLpActivity.Companion.ID_PELAPOR_SAKSI\r\nimport id.calocallo.sicape.utils.SessionManager1\r\nimport id.calocallo.sicape.utils.hideKeyboard\r\nimport id.co.iconpln.smartcity.ui.base.BaseActivity\r\nimport kotlinx.android.synthetic.main.activity_pick_pasal.*\r\nimport kotlinx.android.synthetic.main.layout_toolbar_white.*\r\nimport retrofit2.Call\r\nimport retrofit2.Callback\r\nimport retrofit2.Response\r\n\r\nclass PickPasalActivity : BaseActivity(), ActionMode.Callback {\r\n    private lateinit var sessionManager1: SessionManager1\r\n    private val listPasal = mutableListOf<PasalResp>()\r\n    private lateinit var adapterPasalTes: PasalTesAdapter\r\n    private var selectedIdPasal: MutableList<PasalResp> = mutableListOf()\r\n    private var tracker: SelectionTracker<PasalResp>? = null\r\n    private val listIdPasal = ArrayList<ListIdPasalReq>()\r\n\r\n    //req\r\n    private var lpPidanaReq = LpPidanaReq()\r\n    private var lpKKeReq = LpKkeReq()\r\n    private var lpDisiplinReq = LpDisiplinReq()\r\n\r\n    /*action mode*/\r\n    private var actionMode: ActionMode? = null\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_pick_pasal)\r\n        setupActionBarWithBackButton(toolbar)\r\n        sessionManager1 = SessionManager1(this)\r\n        Logger.addLogAdapter(AndroidLogAdapter())\r\n        hideKeyboard()\r\n        when (sessionManager1.getJenisLP()) {\r\n            \"pidana\" -> {\r\n                supportActionBar?.title = \"Tambah Data Laporan Pidana\"\r\n            }\r\n            \"disiplin\" -> {\r\n                supportActionBar?.title = \"Tambah Data Laporan Disiplin\"\r\n            }\r\n            \"kode_etik\" -> supportActionBar?.title = \"Tambah Data Laporan Kode Etik\"\r\n        }\r\n        apiPasalAll()\r\n//        getListPasal(listPasal)\r\n\r\n\r\n        //getSipil if not empty\r\n        val sipil = intent?.extras?.getParcelable<SipilPelaporReq>(SIPIL)\r\n\r\n        val idPelapor = intent.extras?.getInt(ID_PELAPOR)\r\n        bindProgressButton(btn_save_lp_all)\r\n        btn_save_lp_all.attachTextChangeAnimator()\r\n        if (sessionManager1.getJenisLP() == \"kode_etik\") {\r\n            btn_save_lp_all.text = getString(R.string.next)\r\n        }\r\n        btn_save_lp_all.setOnClickListener {\r\n\r\n            for (i in 0 until selectedIdPasal.size) {\r\n                listIdPasal.add(ListIdPasalReq(selectedIdPasal[i].id))\r\n            }\r\n//            Log.e(\"idPasalOnButton\", \"$listIdPasal\")\r\n            if (sessionManager1.getJenisLP() != \"kode_etik\") {\r\n                addAllLp(sessionManager1.getJenisLP(), idPelapor, sipil)\r\n            } else {\r\n                sessionManager1.setListPasalLP(listIdPasal)\r\n                val intent = Intent(this, PickSaksiActivity::class.java)\r\n                intent.putExtra(ID_PELAPOR_SAKSI, idPelapor)\r\n                startActivity(intent)\r\n                overridePendingTransition(R.anim.slide_in_right, R.anim.slide_out_left)\r\n            }\r\n        }\r\n\r\n        btn_add_single_pasal.setOnClickListener {\r\n            val intent = Intent(this, AddPasalActivity::class.java)\r\n            startActivity(intent)\r\n            overridePendingTransition(R.anim.slide_in_right, R.anim.slide_out_left)\r\n        }\r\n        /*searchView*/\r\n        searchView()\r\n\r\n\r\n    }\r\n\r\n    private fun searchView() {\r\n        search_pasal_pick.setOnQueryTextListener(object : SearchView.OnQueryTextListener {\r\n            override fun onQueryTextSubmit(query: String?): Boolean {\r\n                return false\r\n            }\r\n\r\n            override fun onQueryTextChange(newText: String?): Boolean {\r\n                adapterPasalTes.filter.filter(newText)\r\n                return true\r\n            }\r\n        }\r\n\r\n    private fun apiPasalAll() {\r\n        NetworkConfig().getServLp().getAllPasal(\"Bearer ${sessionManager1.fetchAuthToken()}\")\r\n            .enqueue(object :\r\n                Callback<ArrayList<PasalResp>> {\r\n                override fun onFailure(call: Call<ArrayList<PasalResp>>, t: Throwable) {\r\n                    Toast.makeText(this@PickPasalActivity, \"Error Konekisi\", Toast.LENGTH_SHORT)\r\n                        .show()\r\n                }\r\n\r\n                override fun onResponse(\r\n                    call: Call<ArrayList<PasalResp>>,\r\n                    response: Response<ArrayList<PasalResp>>\r\n                ) {\r\n                    if (response.isSuccessful) {\r\n                        getListPasal(response.body() as ArrayList<PasalResp>)\r\n                    } else {\r\n                        Toast.makeText(this@PickPasalActivity, \"Error Konekisi\", Toast.LENGTH_SHORT)\r\n                            .show()\r\n                    }\r\n                }\r\n            })\r\n    }\r\n\r\n    private fun getListPasal(listPasal: MutableList<PasalResp>) {\r\n        rv_list_pasal_2.layoutManager =\r\n            LinearLayoutManager(this, LinearLayoutManager.VERTICAL, false)\r\n        adapterPasalTes = PasalTesAdapter(this, listPasal as ArrayList<PasalResp>)\r\n        rv_list_pasal_2.adapter = adapterPasalTes\r\n\r\n        tracker = SelectionTracker.Builder<PasalResp>(\r\n            \"pasalSelection\",\r\n            rv_list_pasal_2,\r\n            PasalTesItemKeyProvider(adapterPasalTes),\r\n            PasalTesDetailsLookup(rv_list_pasal_2),\r\n            StorageStrategy.createParcelableStorage(PasalResp::class.java)\r\n        ).withSelectionPredicate(\r\n            SelectionPredicates.createSelectAnything()\r\n        ).build()\r\n        adapterPasalTes.tracker = tracker\r\n\r\n        tracker?.addObserver(\r\n            object : SelectionTracker.SelectionObserver<PasalResp>() {\r\n                override fun onSelectionChanged() {\r\n                    super.onSelectionChanged()\r\n                    tracker?.let {\r\n                        selectedIdPasal = it.selection.toMutableList()\r\n                        Log.e(\"idPasal\", \"$selectedIdPasal\")\r\n                        if (selectedIdPasal.isEmpty()) {\r\n                            actionMode?.finish()\r\n                        } else {\r\n                            if (actionMode == null) actionMode =\r\n                                startSupportActionMode(this@PickPasalActivity)\r\n                            actionMode?.title = \" ${selectedIdPasal.size}\"\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    private fun addAllLp(jenisLP: String?, idPelapor: Int?, sipil: SipilPelaporReq?) {\r\n        val animatedDrawable = ContextCompat.getDrawable(this, R.drawable.animated_check)!!\r\n        //Defined bounds are required for your drawable\r\n        val drawableSize = resources.getDimensionPixelSize(R.dimen.space_25dp)\r\n        animatedDrawable.setBounds(0, 0, drawableSize, drawableSize)\r\n\r\n        btn_save_lp_all.showProgress {\r\n            progressColor = Color.WHITE\r\n        }\r\n//        btn_save_lp_all.hideDrawable(R.string.save)\r\n\r\n        when (jenisLP) {\r\n            \"pidana\" -> {\r\n//                lpPidanaReq.no_lp = sessionManager1.getNoLP()\r\n                lpPidanaReq.id_satuan_kerja = 123\r\n                lpPidanaReq.id_personel_terlapor = sessionManager1.getIDPersonelTerlapor()\r\n//                lpPidanaReq.id_personel_pelapor = idPelapor\r\n//                lpPidanaReq.nama_yang_mengetahui = sessionManager1.getNamaPimpBidLp()\r\n//                lpPidanaReq.pangkat_yang_mengetahui = sessionManager1.getPangkatPimpBidLp()\r\n//                lpPidanaReq.nrp_yang_mengetahui = sessionManager1.getNrpPimpBidLp()\r\n//                lpPidanaReq.jabatan_yang_mengetahui = sessionManager1.getJabatanPimpBidLp()\r\n//                lpPidanaReq.status_pelapor = sessionManager1.getPelapor()\r\n//                lpPidanaReq.pembukaan_laporan = sessionManager1.getPembukaanLpLP()\r\n                lpPidanaReq.isi_laporan = sessionManager1.getIsiLapLP()\r\n                lpPidanaReq.pasal_dilanggar = listIdPasal\r\n                lpPidanaReq.waktu_buat_laporan = sessionManager1.getWaktuBuatLaporan()\r\n//                lpPidanaReq.pasal_dilanggar = selectedIdPasal as ArrayList<LpPasalResp>\r\n                lpPidanaReq.kota_buat_laporan = sessionManager1.getKotaBuatLp()\r\n                lpPidanaReq.tanggal_buat_laporan = sessionManager1.getTglBuatLp()\r\n                lpPidanaReq.nama_pelapor = sipil?.nama_sipil\r\n                lpPidanaReq.agama_pelapor = sipil?.agama_sipil\r\n                lpPidanaReq.pekerjaan_pelapor = sipil?.pekerjaan_sipil\r\n                lpPidanaReq.kewarganegaraan_pelapor = sipil?.kewarganegaraan_sipil\r\n                lpPidanaReq.alamat_pelapor = sipil?.alamat_sipil\r\n                lpPidanaReq.nik_ktp_pelapor = sipil?.nik_sipil\r\n                lpPidanaReq.no_telp_pelapor = sipil?.no_telp_sipil\r\n                lpPidanaReq.jenis_kelamin_pelapor = sipil?.jenis_kelamin\r\n                lpPidanaReq.tempat_lahir_pelapor = sipil?.tempat_lahir_pelapor\r\n                lpPidanaReq.tanggal_lahir_pelapor = sipil?.tanggal_lahir_pelapor\r\n                lpPidanaReq.uraian_pelanggaran = sessionManager1.getUraianPelanggaranLP()\r\n//                lpPidanaReq.kesatuan_yang_mengetahui = sessionManager1.getKesatuanPimpBidLp()\r\n                Logger.e(\"$lpPidanaReq\")\r\n                apiAddLpPidana()\r\n            }\r\n            \"disiplin\" -> {\r\n                lpDisiplinReq.id_satuan_kerja = 123\r\n                lpDisiplinReq.waktu_buat_laporan = sessionManager1.getWaktuBuatLaporan()\r\n                lpDisiplinReq.no_lp = sessionManager1.getNoLP()\r\n                lpDisiplinReq.uraian_pelanggaran = jenisLP\r\n//                lpDisiplinReq.id_personel_operator = sessionManager1.fetchUserPersonel()?.id\r\n                lpDisiplinReq.id_personel_terlapor = sessionManager1.getIDPersonelTerlapor()\r\n                lpDisiplinReq.kota_buat_laporan = sessionManager1.getKotaBuatLp()\r\n                lpDisiplinReq.tanggal_buat_laporan = sessionManager1.getTglBuatLp()\r\n                lpDisiplinReq.nama_yang_mengetahui = sessionManager1.getNamaPimpBidLp()\r\n                lpDisiplinReq.pangkat_yang_mengetahui = sessionManager1.getPangkatPimpBidLp()\r\n                lpDisiplinReq.nrp_yang_mengetahui = sessionManager1.getNrpPimpBidLp()\r\n                lpDisiplinReq.jabatan_yang_mengetahui = sessionManager1.getJabatanPimpBidLp()\r\n                lpDisiplinReq.id_personel_pelapor = idPelapor\r\n                lpDisiplinReq.macam_pelanggaran = sessionManager1.getMacamPelanggaranLP()\r\n                lpDisiplinReq.keterangan_pelapor = sessionManager1.getKetPelaporLP()\r\n                lpDisiplinReq.kronologis_dari_pelapor = sessionManager1.getKronologisPelapor()\r\n                lpDisiplinReq.rincian_pelanggaran_disiplin = sessionManager1.getRincianDisiplin()\r\n                lpDisiplinReq.pasal_dilanggar = listIdPasal\r\n                lpDisiplinReq.kesatuan_yang_mengetahui = sessionManager1.getKesatuanPimpBidLp()\r\n                Logger.e(\"$lpDisiplinReq\")\r\n                apiAddLpDisiplin()\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    private fun apiAddLpDisiplin() {\r\n        NetworkConfig().getServLp().addLpDisiplin(\"Bearer ${sessionManager1.fetchAuthToken()}\",lpDisiplinReq).enqueue(object :Callback<Base1Resp<DokLpResp>>{\r\n            override fun onFailure(call: Call<Base1Resp<DokLpResp>>, t: Throwable) {\r\n                Toast.makeText(this@PickPasalActivity, R.string.error_conn, Toast.LENGTH_SHORT).show()\r\n                btn_save_lp_all.hideDrawable(R.string.not_save)\r\n            }\r\n\r\n            override fun onResponse(\r\n                call: Call<Base1Resp<DokLpResp>>,\r\n                response: Response<Base1Resp<DokLpResp>>\r\n            ) {\r\n                if(response.body()?.message == \"Data lp disiplin saved succesfully\"){\r\n                    btn_save_lp_all.hideDrawable(R.string.data_saved)\r\n                    Handler(Looper.getMainLooper()).postDelayed({\r\n                       startActivity(Intent(this@PickPasalActivity, ListLpDisiplinActivity::class.java))\r\n                       finish()\r\n                    },500)\r\n                }else{\r\n                    Toast.makeText(this@PickPasalActivity, R.string.error_conn, Toast.LENGTH_SHORT).show()\r\n                    btn_save_lp_all.hideDrawable(R.string.not_save)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun apiAddLpPidana() {\r\n        NetworkConfig().getServLp()\r\n            .addLpPidana(\"Bearer ${sessionManager1.fetchAuthToken()}\", lpPidanaReq)\r\n            .enqueue(object : Callback<Base1Resp<DokLpResp>> {\r\n                override fun onFailure(call: Call<Base1Resp<DokLpResp>>, t: Throwable) {\r\n                    Toast.makeText(this@PickPasalActivity, R.string.error_conn, Toast.LENGTH_SHORT)\r\n                        .show()\r\n                    btn_save_lp_all.hideDrawable(R.string.not_save)\r\n                    Log.e(\"t\", \"$t\")\r\n                }\r\n\r\n                override fun onResponse(\r\n                    call: Call<Base1Resp<DokLpResp>>,\r\n                    response: Response<Base1Resp<DokLpResp>>\r\n                ) {\r\n                    if (response.body()?.message == \"Data lp pidana saved succesfully\") {\r\n                        val animatedDrawable =\r\n                            ContextCompat.getDrawable(\r\n                                this@PickPasalActivity,\r\n                                R.drawable.animated_check\r\n                            )!!\r\n                        //Defined bounds are required for your drawable\r\n                        val drawableSize = resources.getDimensionPixelSize(R.dimen.space_25dp)\r\n                        animatedDrawable.setBounds(0, 0, drawableSize, drawableSize)\r\n                        btn_save_lp_all.showDrawable(animatedDrawable) {\r\n                            buttonTextRes = R.string.data_saved\r\n                            textMarginRes = R.dimen.space_10dp\r\n                        }\r\n                        Handler(Looper.getMainLooper()).postDelayed({\r\n                            finish()\r\n                        },500)\r\n                    } else {\r\n                        btn_save_lp_all.hideDrawable(R.string.not_save)\r\n                    }\r\n                }\r\n            })\r\n    }\r\n\r\n    companion object {\r\n        const val ID_PELAPOR = \"ID_PELAPOR\"\r\n        const val SIPIL = \"SIPIL\"\r\n    }\r\n\r\n    override fun onActionItemClicked(mode: ActionMode?, item: MenuItem?): Boolean {\r\n        when (item?.itemId) {\r\n            R.id.action_view_list -> {\r\n                val listNamePasal = ArrayList<String>()\r\n                for (i in 0 until selectedIdPasal.size) {\r\n                    selectedIdPasal[i].nama_pasal?.let { listNamePasal.add(it) }\r\n                }\r\n                Toast.makeText(this, \"$listNamePasal\", Toast.LENGTH_SHORT).show()\r\n            }\r\n        }\r\n        return true\r\n    }\r\n\r\n    override fun onCreateActionMode(mode: ActionMode?, menu: Menu?): Boolean {\r\n        mode?.let {\r\n            val inflater: MenuInflater = it.menuInflater\r\n            inflater.inflate(R.menu.action_mode_menu, menu)\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    override fun onPrepareActionMode(mode: ActionMode?, menu: Menu?): Boolean {\r\n        return true\r\n    }\r\n\r\n    override fun onDestroyActionMode(mode: ActionMode?) {\r\n        adapterPasalTes.tracker?.clearSelection()\r\n        adapterPasalTes.notifyDataSetChanged()\r\n        actionMode = null\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n        apiPasalAll()\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/id/calocallo/sicape/ui/main/lp/pasal/PickPasalActivity.kt	(revision 373e1a6c996e6b63b5ba2b392c3688d8a99e33a8)
+++ app/src/main/java/id/calocallo/sicape/ui/main/lp/pasal/PickPasalActivity.kt	(date 1614063206208)
@@ -3,6 +3,8 @@
 import android.content.Intent
 import android.graphics.Color
 import android.os.Bundle
+import android.os.Handler
+import android.os.Looper
 import android.util.Log
 import android.view.Menu
 import android.view.MenuInflater
@@ -121,7 +123,8 @@
                 adapterPasalTes.filter.filter(newText)
                 return true
             }
-        }
+        })
+    }
 
     private fun apiPasalAll() {
         NetworkConfig().getServLp().getAllPasal("Bearer ${sessionManager1.fetchAuthToken()}")
