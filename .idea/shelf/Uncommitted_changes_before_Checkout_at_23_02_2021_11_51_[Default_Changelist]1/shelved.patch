Index: app/src/main/java/id/calocallo/sicape/ui/main/lp/pasal/tes/PasalTesItemKeyProvider.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package id.calocallo.sicape.ui.main.lp.pasal.tes\r\n\r\nimport androidx.recyclerview.selection.ItemKeyProvider\r\nimport id.calocallo.sicape.network.response.PasalResp\r\n\r\n\r\nclass PasalTesItemKeyProvider(private val tesAdapter: PasalTesAdapter) :\r\n    ItemKeyProvider<PasalResp>(SCOPE_CACHED) {\r\n    override fun getKey(position: Int): PasalResp? {\r\n        return tesAdapter.getItem(position)\r\n    }\r\n\r\n    override fun getPosition(key: PasalResp): Int {\r\n        return tesAdapter.getPosition(key.nama_pasal!!)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/id/calocallo/sicape/ui/main/lp/pasal/tes/PasalTesItemKeyProvider.kt	(revision a7fcd6281606177d1251518751e403a5535497eb)
+++ app/src/main/java/id/calocallo/sicape/ui/main/lp/pasal/tes/PasalTesItemKeyProvider.kt	(date 1614049450932)
@@ -2,9 +2,13 @@
 
 import androidx.recyclerview.selection.ItemKeyProvider
 import id.calocallo.sicape.network.response.PasalResp
+import id.calocallo.sicape.network.response.PersonelMinResp
+import id.calocallo.sicape.ui.main.choose.multiple.PersonelMultipleAdapter
+import id.calocallo.sicape.ui.main.lp.pasal.PasalMultipleAdapter
 
 
-class PasalTesItemKeyProvider(private val tesAdapter: PasalTesAdapter) :
+/*
+class PasalTesItemKeyProvider(private val tesAdapter: PasalMultipleAdapter) :
     ItemKeyProvider<PasalResp>(SCOPE_CACHED) {
     override fun getKey(position: Int): PasalResp? {
         return tesAdapter.getItem(position)
@@ -13,4 +17,14 @@
     override fun getPosition(key: PasalResp): Int {
         return tesAdapter.getPosition(key.nama_pasal!!)
     }
+}*/
+class PasalTesItemKeyProvider(private val adapter: PasalMultipleAdapter) :
+    ItemKeyProvider<PasalResp>(SCOPE_CACHED) {
+    override fun getKey(position: Int): PasalResp? {
+        return adapter.getItem(position)
+    }
+
+    override fun getPosition(key: PasalResp): Int {
+        return adapter.getPosition(key.nama_pasal!!)
+    }
 }
\ No newline at end of file
Index: app/src/main/java/id/calocallo/sicape/ui/main/lp/pasal/tes/PasalTesDetailsLookup.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package id.calocallo.sicape.ui.main.lp.pasal.tes\r\n\r\nimport android.view.MotionEvent\r\nimport androidx.recyclerview.selection.ItemDetailsLookup\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport id.calocallo.sicape.network.response.PasalResp\r\nimport id.calocallo.sicape.ui.main.lp.pasal.tes.PasalTesAdapter\r\n\r\nclass PasalTesDetailsLookup(private val recyclerView: RecyclerView) :\r\n    ItemDetailsLookup<PasalResp>() {\r\n    override fun getItemDetails(event: MotionEvent): ItemDetails<PasalResp>? {\r\n        val view = recyclerView.findChildViewUnder(event.x, event.y)\r\n        if (view != null) {\r\n            return (recyclerView.getChildViewHolder(view) as PasalTesAdapter.PasalHolder)\r\n                .getItemDetails()\r\n        }\r\n        return null\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/id/calocallo/sicape/ui/main/lp/pasal/tes/PasalTesDetailsLookup.kt	(revision a7fcd6281606177d1251518751e403a5535497eb)
+++ app/src/main/java/id/calocallo/sicape/ui/main/lp/pasal/tes/PasalTesDetailsLookup.kt	(date 1614049450927)
@@ -4,16 +4,33 @@
 import androidx.recyclerview.selection.ItemDetailsLookup
 import androidx.recyclerview.widget.RecyclerView
 import id.calocallo.sicape.network.response.PasalResp
+import id.calocallo.sicape.network.response.PersonelMinResp
+import id.calocallo.sicape.ui.main.choose.multiple.PersonelMultipleAdapter
+import id.calocallo.sicape.ui.main.lp.pasal.PasalMultipleAdapter
 import id.calocallo.sicape.ui.main.lp.pasal.tes.PasalTesAdapter
 
+/*
 class PasalTesDetailsLookup(private val recyclerView: RecyclerView) :
     ItemDetailsLookup<PasalResp>() {
     override fun getItemDetails(event: MotionEvent): ItemDetails<PasalResp>? {
         val view = recyclerView.findChildViewUnder(event.x, event.y)
         if (view != null) {
-            return (recyclerView.getChildViewHolder(view) as PasalTesAdapter.PasalHolder)
+            return (recyclerView.getChildViewHolder(view) as PasalMultipleAdapter.PasalMultipleHolder)
+                .getItemDetails()
+        }
+        return null
+    }
+}*/
+
+class PasalTesDetailsLookup(private val recyclerView: RecyclerView) :
+    ItemDetailsLookup<PasalResp>() {
+    override fun getItemDetails(e: MotionEvent): ItemDetails<PasalResp>? {
+        val view = recyclerView.findChildViewUnder(e.x, e.y)
+        if (view != null) {
+            return (recyclerView.getChildViewHolder(view) as PasalMultipleAdapter.PasalMultipleHolder)
                 .getItemDetails()
         }
         return null
     }
+
 }
\ No newline at end of file
Index: app/src/main/java/id/calocallo/sicape/ui/main/lp/pasal/PickSaksiActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package id.calocallo.sicape.ui.main.lp.pasal\r\n\r\nimport android.content.Intent\r\nimport android.graphics.Color\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android.os.Looper\r\nimport android.util.Log\r\nimport android.view.View\r\nimport android.widget.Toast\r\nimport androidx.appcompat.view.ActionMode\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.recyclerview.selection.SelectionPredicates\r\nimport androidx.recyclerview.selection.SelectionTracker\r\nimport androidx.recyclerview.selection.StorageStrategy\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport com.github.razir.progressbutton.*\r\nimport id.calocallo.sicape.R\r\nimport id.calocallo.sicape.network.NetworkConfig\r\nimport id.calocallo.sicape.network.request.LpDisiplinReq\r\nimport id.calocallo.sicape.network.request.LpKkeReq\r\nimport id.calocallo.sicape.network.request.LpPidanaReq\r\nimport id.calocallo.sicape.network.request.SaksiReq\r\nimport id.calocallo.sicape.network.response.Base1Resp\r\nimport id.calocallo.sicape.network.response.DokLpResp\r\nimport id.calocallo.sicape.network.response.LpSaksiResp\r\nimport id.calocallo.sicape.ui.main.lp.kke.ListLpKodeEtikActivity\r\nimport id.calocallo.sicape.ui.main.lp.pidana.tes.SelectedSaksiAdapter\r\nimport id.calocallo.sicape.ui.main.lp.pidana.tes.SelectedSaksiDetailsLookup\r\nimport id.calocallo.sicape.ui.main.lp.pidana.tes.SelectedSaksiItemKeyProvider\r\nimport id.calocallo.sicape.ui.main.lp.saksi.AddSaksiLpActivity\r\nimport id.calocallo.sicape.utils.SessionManager1\r\nimport id.co.iconpln.smartcity.ui.base.BaseActivity\r\nimport kotlinx.android.synthetic.main.activity_pick_saksi.*\r\nimport kotlinx.android.synthetic.main.item_2_text.view.*\r\nimport kotlinx.android.synthetic.main.layout_toolbar_white.*\r\nimport org.marproject.reusablerecyclerviewadapter.ReusableAdapter\r\nimport org.marproject.reusablerecyclerviewadapter.interfaces.AdapterCallback\r\nimport retrofit2.Call\r\nimport retrofit2.Callback\r\nimport retrofit2.Response\r\n\r\nclass PickSaksiActivity : BaseActivity() {\r\n    private lateinit var sessionManager1: SessionManager1\r\n    private val listSaksi = mutableListOf<SaksiReq>()\r\n    private lateinit var adapterSaksiMulti: SelectedSaksiAdapter\r\n    private var selectedSaksi: MutableList<LpSaksiResp> = mutableListOf()\r\n    private var tracker: SelectionTracker<LpSaksiResp>? = null\r\n\r\n    private var adapterSaksi = ReusableAdapter<SaksiReq>(this)\r\n    private lateinit var callbackSaksi: AdapterCallback<SaksiReq>\r\n\r\n    //req\r\n    private var lpPidanaReq = LpPidanaReq()\r\n    private var lpKKeReq = LpKkeReq()\r\n    private var lpDisiplinReq = LpDisiplinReq()\r\n\r\n    /*action mode*/\r\n    private var actionMode: ActionMode? = null\r\n\r\n    companion object {\r\n        const val REQ_SAKSI_ADD = 1\r\n        const val ID_PELAPOR_SAKSI = \"JENIS_LP_SAKSI\"\r\n        const val RES_SAKSI_ADD = 2\r\n    }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_pick_saksi)\r\n        setupActionBarWithBackButton(toolbar)\r\n        sessionManager1 = SessionManager1(this)\r\n\r\n        when (sessionManager1.getJenisLP()) {\r\n            \"pidana\" -> {\r\n                supportActionBar?.title = \"Tambah Data Laporan Pidana\"\r\n            }\r\n            \"disiplin\" -> {\r\n                supportActionBar?.title = \"Tambah Data Laporan Disiplin\"\r\n            }\r\n            \"kode_etik\" -> supportActionBar?.title = \"Tambah Data Laporan Kode Etik\"\r\n        }\r\n        /* listSaksi.add(\r\n             LpSaksiResp(1, \"Utuh\", \"\", \"\", \"\", \"\", 0, \"\", \"\", \"\")\r\n         )\r\n         listSaksi.add(\r\n             LpSaksiResp(2, \"Galuh\", \"\", \"\", \"\", \"\", 0, \"\", \"\", \"\")\r\n         )\r\n         listSaksi.add(\r\n             LpSaksiResp(3, \"Dulak\", \"\", \"\", \"\", \"\", 1, \"\", \"\", \"\")\r\n         )*/\r\n\r\n//        getListSaksiMulti(listSaksi)\r\n        getListSaksi(listSaksi)\r\n        val idPelaporSaksi = intent.extras?.getInt(ID_PELAPOR_SAKSI)\r\n\r\n        bindProgressButton(btn_save_lp_all_2)\r\n        btn_save_lp_all_2.attachTextChangeAnimator()\r\n        btn_save_lp_all_2.setOnClickListener {\r\n            btn_save_lp_all_2.showProgress {\r\n                progressColor = Color.WHITE\r\n            }\r\n            addAllLp(sessionManager1.getJenisLP(), idPelaporSaksi)\r\n        }\r\n\r\n        btn_add_single_saksi_2.setOnClickListener {\r\n            val intent = Intent(this, AddSaksiLpActivity::class.java)\r\n            overridePendingTransition(R.anim.slide_in_right, R.anim.slide_out_left)\r\n            startActivityForResult(intent, REQ_SAKSI_ADD)\r\n        }\r\n\r\n    }\r\n\r\n    private fun getListSaksi(listSaksi: MutableList<SaksiReq>) {\r\n        callbackSaksi = object : AdapterCallback<SaksiReq> {\r\n            override fun initComponent(itemView: View, data: SaksiReq, itemIndex: Int) {\r\n                itemView.txt_detail_1.text = data.nama\r\n                if (data.is_korban == 0) {\r\n                    itemView.txt_detail_2.text = \"Saksi\"\r\n                } else {\r\n                    itemView.txt_detail_2.text = \"Korban\"\r\n                }\r\n            }\r\n\r\n            override fun onItemClicked(itemView: View, data: SaksiReq, itemIndex: Int) {}\r\n        }\r\n        adapterSaksi.adapterCallback(callbackSaksi)\r\n            .isVerticalView()\r\n            .addData(listSaksi)\r\n            .setLayout(R.layout.item_2_text)\r\n            .build(rv_list_saksi_2)\r\n    }\r\n\r\n    private fun getListSaksiMulti(listSaksi: MutableList<SaksiReq>) {\r\n        rv_list_saksi_2.layoutManager =\r\n            LinearLayoutManager(this, LinearLayoutManager.VERTICAL, false)\r\n        adapterSaksiMulti = SelectedSaksiAdapter(this, listSaksi as ArrayList<LpSaksiResp>)\r\n        rv_list_saksi_2.adapter = adapterSaksiMulti\r\n\r\n        tracker = SelectionTracker.Builder<LpSaksiResp>(\r\n            \"pasalSelection\",\r\n            rv_list_saksi_2,\r\n            SelectedSaksiItemKeyProvider(adapterSaksiMulti),\r\n            SelectedSaksiDetailsLookup(rv_list_saksi_2),\r\n            StorageStrategy.createParcelableStorage(LpSaksiResp::class.java)\r\n        ).withSelectionPredicate(\r\n            SelectionPredicates.createSelectAnything()\r\n        ).build()\r\n        adapterSaksiMulti.tracker = tracker\r\n\r\n        tracker?.addObserver(\r\n            object : SelectionTracker.SelectionObserver<Long>() {\r\n                override fun onSelectionChanged() {\r\n                    super.onSelectionChanged()\r\n                    tracker?.let {\r\n                        selectedSaksi = it.selection.toMutableList()\r\n                        Log.e(\"idPasal\", \"$selectedSaksi\")\r\n                    }\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    private fun addAllLp(jenisLP: String?, idPelapor: Int?) {\r\n        when (jenisLP) {\r\n            \"kode_etik\" -> {\r\n//                lpKKeReq.no_lp = sessionManager1.getNoLP()\r\n//                lpKKeReq.id_personel_operator = sessionManager.fetchUser()?.id\r\n                lpKKeReq.id_satuan_kerja = 123\r\n                lpKKeReq.uraian_pelanggaran = sessionManager1.getUraianPelanggaranLP()\r\n                lpKKeReq.kota_buat_laporan = sessionManager1.getKotaBuatLp()\r\n                lpKKeReq.tanggal_buat_laporan = sessionManager1.getTglBuatLp()\r\n                lpKKeReq.id_personel_terlapor = sessionManager1.getIDPersonelTerlapor()\r\n                lpKKeReq.id_personel_pelapor = idPelapor\r\n//                lpKKeReq.id_sipil_pelapor = sessionManager.getIdSipilPelapor()\r\n                lpKKeReq.nama_yang_mengetahui = sessionManager1.getNamaPimpBidLp()\r\n                lpKKeReq.pangkat_yang_mengetahui = sessionManager1.getPangkatPimpBidLp()\r\n                lpKKeReq.nrp_yang_mengetahui = sessionManager1.getNrpPimpBidLp()\r\n                lpKKeReq.jabatan_yang_mengetahui = sessionManager1.getJabatanPimpBidLp()\r\n                lpKKeReq.alat_bukti = sessionManager1.getAlatBukiLP()\r\n                lpKKeReq.isi_laporan = sessionManager1.getIsiLapLP()\r\n                lpKKeReq.uraian_pelanggaran = sessionManager1.getUraianPelanggaranLP()\r\n                lpKKeReq.pasal_dilanggar = sessionManager1.getListPasalLP()\r\n                lpKKeReq.saksi_kode_etik = listSaksi as ArrayList<SaksiReq>\r\n//                lpKKeReq.saksi_kode_etik = selectedSaksi as ArrayList<LpSaksiResp>\r\n//                lpKKeReq.kesatuan_yang_mengetahui = sessionManager1.getKesatuanPimpBidLp()\r\n                Log.e(\"KKE\", \"$lpKKeReq\")\r\n                apiAddKke()\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    private fun apiAddKke() {\r\n        NetworkConfig().getServLp().addLpKke(\"Bearer ${sessionManager1.fetchAuthToken()}\", lpKKeReq)\r\n            .enqueue(object :\r\n                Callback<Base1Resp<DokLpResp>> {\r\n                override fun onFailure(call: Call<Base1Resp<DokLpResp>>, t: Throwable) {\r\n                    Toast.makeText(this@PickSaksiActivity, R.string.error_conn, Toast.LENGTH_SHORT)\r\n                        .show()\r\n                    btn_save_lp_all_2.hideDrawable(R.string.not_save)\r\n                }\r\n\r\n                override fun onResponse(\r\n                    call: Call<Base1Resp<DokLpResp>>,\r\n                    response: Response<Base1Resp<DokLpResp>>\r\n                ) {\r\n                    if (response.body()?.message == \"Data lp kode etik saved succesfully\") {\r\n                        val animatedDrawable =\r\n                            ContextCompat.getDrawable(\r\n                                this@PickSaksiActivity,\r\n                                R.drawable.animated_check\r\n                            )!!\r\n                        val drawableSize = resources.getDimensionPixelSize(R.dimen.space_25dp)\r\n                        animatedDrawable.setBounds(0, 0, drawableSize, drawableSize)\r\n                        btn_save_lp_all_2.showDrawable(animatedDrawable) {\r\n                            buttonTextRes = R.string.data_saved\r\n                            textMarginRes = R.dimen.space_10dp\r\n                        }\r\n                        Handler(Looper.getMainLooper()).postDelayed({\r\n                            startActivity(\r\n                                Intent(\r\n                                    this@PickSaksiActivity,\r\n                                    ListLpKodeEtikActivity::class.java\r\n                                )\r\n                            )\r\n                            finish()\r\n                        }, 500)\r\n                    } else {\r\n                        Toast.makeText(\r\n                            this@PickSaksiActivity,\r\n                            R.string.error_conn,\r\n                            Toast.LENGTH_SHORT\r\n                        )\r\n                            .show()\r\n                        btn_save_lp_all_2.hideDrawable(R.string.not_save)\r\n                    }\r\n                }\r\n            })\r\n    }\r\n\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n        if (requestCode == REQ_SAKSI_ADD && resultCode == RES_SAKSI_ADD) {\r\n            val dataSaksi = data?.getParcelableExtra<SaksiReq>(\"DATA_SAKSI\")\r\n            Log.e(\"dataSaksi\", \"$dataSaksi\")\r\n            dataSaksi?.let { listSaksi.add(it) }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/id/calocallo/sicape/ui/main/lp/pasal/PickSaksiActivity.kt	(revision a7fcd6281606177d1251518751e403a5535497eb)
+++ app/src/main/java/id/calocallo/sicape/ui/main/lp/pasal/PickSaksiActivity.kt	(date 1614044450668)
@@ -148,7 +148,7 @@
         adapterSaksiMulti.tracker = tracker
 
         tracker?.addObserver(
-            object : SelectionTracker.SelectionObserver<Long>() {
+            object : SelectionTracker.SelectionObserver<LpSaksiResp>() {
                 override fun onSelectionChanged() {
                     super.onSelectionChanged()
                     tracker?.let {
Index: app/src/main/java/id/calocallo/sicape/ui/main/choose/ChoosePersonelActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package id.calocallo.sicape.ui.main.choose\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.Menu\r\nimport android.view.MenuInflater\r\nimport android.view.MenuItem\r\nimport android.view.View\r\nimport android.widget.Toast\r\nimport androidx.appcompat.view.ActionMode\r\nimport androidx.appcompat.widget.SearchView\r\nimport androidx.recyclerview.selection.SelectionPredicates\r\nimport androidx.recyclerview.selection.SelectionTracker\r\nimport androidx.recyclerview.selection.StorageStrategy\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport id.calocallo.sicape.R\r\nimport id.calocallo.sicape.model.AllPersonelModel\r\nimport id.calocallo.sicape.network.NetworkConfig\r\nimport id.calocallo.sicape.network.response.PersonelMinResp\r\nimport id.calocallo.sicape.network.response.SatKerResp\r\nimport id.calocallo.sicape.ui.gelar.AddGelarActivity\r\nimport id.calocallo.sicape.ui.main.choose.multiple.PersonelDetailsLookup\r\nimport id.calocallo.sicape.ui.main.choose.multiple.PersonelItemKeyProvider\r\nimport id.calocallo.sicape.ui.main.choose.multiple.PersonelMultipleAdapter\r\nimport id.calocallo.sicape.ui.main.personel.PersonelActivity\r\nimport id.calocallo.sicape.utils.SessionManager1\r\nimport id.calocallo.sicape.utils.ext.gone\r\nimport id.calocallo.sicape.utils.ext.visible\r\nimport id.co.iconpln.smartcity.ui.base.BaseActivity\r\nimport kotlinx.android.synthetic.main.activity_choose_personel.*\r\nimport kotlinx.android.synthetic.main.item_choose_personel.view.*\r\nimport kotlinx.android.synthetic.main.layout_progress_dialog.*\r\nimport kotlinx.android.synthetic.main.layout_toolbar_white.*\r\nimport kotlinx.android.synthetic.main.view_no_data.*\r\nimport org.marproject.reusablerecyclerviewadapter.ReusableAdapter\r\nimport org.marproject.reusablerecyclerviewadapter.interfaces.AdapterCallback\r\nimport retrofit2.Call\r\nimport retrofit2.Callback\r\nimport retrofit2.Response\r\n\r\nclass ChoosePersonelActivity : BaseActivity(), ActionMode.Callback {\r\n    companion object {\r\n        const val MULTIPLE = \"MULTIPLE\"\r\n        const val DATA_MULTIPLE = \"DATA_MULTIPLE\"\r\n        const val REQ_MULTIPLE = \"MULTIPLE\"\r\n    }\r\n\r\n    private lateinit var sessionManager1: SessionManager1\r\n    private lateinit var personelChooseAdapter: ReusableAdapter<PersonelMinResp>\r\n    private lateinit var personelChooseCallback: AdapterCallback<PersonelMinResp>\r\n    private lateinit var selevted : ArrayList<PersonelMinResp>\r\n\r\n    private var selectedPersonel : MutableList<PersonelMinResp> = mutableListOf<PersonelMinResp>()\r\n    private lateinit var adapterPersonelMultiple: PersonelMultipleAdapter\r\n    private var tracker: SelectionTracker<PersonelMinResp>? = null\r\n\r\n    /*action mode*/\r\n    private var actionMode: ActionMode? = null\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_choose_personel)\r\n        sessionManager1 = SessionManager1(this)\r\n\r\n        setupActionBarWithBackButton(toolbar)\r\n        supportActionBar?.title = \"Pilih Personel\"\r\n        Log.e(\"iniChoose\", \"iniChoosePersonel\")\r\n        personelChooseAdapter = ReusableAdapter(this)\r\n        selevted = arrayListOf()\r\n\r\n        val isPolda = intent.extras?.getParcelable<SatKerResp>(PersonelActivity.IS_POLDA)\r\n        val isPolres = intent.extras?.getParcelable<SatKerResp>(PersonelActivity.IS_POLRES)\r\n        val isPolsek = intent.extras?.getParcelable<SatKerResp>(PersonelActivity.IS_POLSEK)\r\n        val isMultipleSelect = intent.getBooleanExtra(MULTIPLE, false)\r\n        if (isMultipleSelect) {\r\n            getPersonel()\r\n            ll_button_choose.visible()\r\n        } else {\r\n            when {\r\n                isPolda != null -> {\r\n                    Log.e(\"isPolda\", \"$isPolda\")\r\n                    apiChoosePersonelBySatker(isPolda)\r\n                }\r\n                isPolres != null -> {\r\n                    Log.e(\"isPOlres\", \"$isPolres\")\r\n                    apiChoosePersonelBySatker(isPolres)\r\n                }\r\n                isPolsek != null -> {\r\n                    Log.e(\"isPolsek\", \"$isPolsek\")\r\n                    apiChoosePersonelBySatker(isPolsek)\r\n                }\r\n//            else -> initAPI()\r\n\r\n            }\r\n        }\r\n\r\n\r\n        /*set ketTerlapor*/\r\n/*//        val terlapor = intent.extras?.getString(ListKetTerlaporLhpActivity.KET_TERLAPOR)\r\n//        if(terlapor == null) {\r\n//        getPersonel()\r\n//        }else{\r\n//            getPersonelByTerlapor()\r\n//        }*/\r\n    }\r\n\r\n    private fun apiChoosePersonelBySatker(satker: SatKerResp) {\r\n        rl_pb.visible()\r\n        NetworkConfig().getService().showPersonelBySatker(\r\n            \"Bearer ${sessionManager1.fetchAuthToken()}\", satker.id.toString()\r\n        ).enqueue(object : Callback<ArrayList<PersonelMinResp>> {\r\n            override fun onFailure(call: Call<ArrayList<PersonelMinResp>>, t: Throwable) {\r\n                rl_no_data.visible()\r\n                rl_pb.gone()\r\n                rv_list_choose_personel.gone()\r\n            }\r\n\r\n            override fun onResponse(\r\n                call: Call<ArrayList<PersonelMinResp>>,\r\n                response: Response<ArrayList<PersonelMinResp>>\r\n            ) {\r\n                if (response.isSuccessful) {\r\n                    rl_pb.gone()\r\n                    if (response.body()?.isEmpty()!!) {\r\n                        rl_no_data.visible()\r\n                        rl_pb.gone()\r\n                        rv_list_choose_personel.gone()\r\n                    } else {\r\n                        rv_list_choose_personel.visible()\r\n                        listPersonelBySatker(response.body())\r\n                    }\r\n                } else {\r\n                    rl_no_data.visible()\r\n                    rl_pb.gone()\r\n                    rv_list_choose_personel.gone()\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun listPersonelBySatker(list: ArrayList<PersonelMinResp>?) {\r\n        personelChooseCallback = object : AdapterCallback<PersonelMinResp> {\r\n            override fun initComponent(itemView: View, data: PersonelMinResp, itemIndex: Int) {\r\n                itemView.txt_personel_nama_choose.text = data.nama\r\n                itemView.txt_personel_pangkat_choose.text =\r\n                    \"Pangkat : ${data.pangkat.toString().toUpperCase()}\"\r\n                itemView.txt_personel_nrp_choose.text = \"NRP : ${data.nrp}\"\r\n                itemView.txt_personel_jabatan_choose.text = data.jabatan\r\n                itemView.txt_personel_kesatuan_choose.text = data.satuan_kerja?.kesatuan\r\n            }\r\n\r\n            override fun onItemClicked(itemView: View, data: PersonelMinResp, itemIndex: Int) {\r\n                itemView.img_choose_personel.visible()\r\n                val intent = Intent()\r\n                intent.putExtra(\"ID_PERSONEL\", data)\r\n                setResult(123, intent)\r\n//                startActivity(intent)\r\n                finish()\r\n            }\r\n        }\r\n        list?.let {\r\n            personelChooseAdapter.adapterCallback(personelChooseCallback)\r\n                .isVerticalView()\r\n                .filterable()\r\n                .addData(it)\r\n                .setLayout(R.layout.item_choose_personel)\r\n                .build(rv_list_choose_personel)\r\n        }\r\n    }\r\n\r\n    private fun getPersonelByTerlapor() {\r\n        rl_pb.visible()\r\n        rv_list_choose_personel.gone()\r\n    }\r\n\r\n    private fun getPersonel() {\r\n        rl_pb.visible()\r\n        rv_list_choose_personel.gone()\r\n        NetworkConfig().getService().showPersonel(\r\n            \"Bearer ${sessionManager1.fetchAuthToken()}\"\r\n        ).enqueue(object : Callback<ArrayList<PersonelMinResp>> {\r\n            override fun onFailure(call: Call<ArrayList<PersonelMinResp>>, t: Throwable) {\r\n                rl_pb.gone()\r\n                rl_no_data.visible()\r\n                Toast.makeText(this@ChoosePersonelActivity, R.string.error_conn, Toast.LENGTH_SHORT)\r\n                    .show()\r\n\r\n            }\r\n\r\n            override fun onResponse(\r\n                call: Call<ArrayList<PersonelMinResp>>,\r\n                response: Response<ArrayList<PersonelMinResp>>\r\n\r\n            ) {\r\n                if (response.isSuccessful) {\r\n                    rl_pb.gone()\r\n                    if (response.body()!!.isEmpty()) {\r\n                        rl_no_data.visible()\r\n                        rv_list_choose_personel.gone()\r\n                    } else {\r\n                        rv_list_choose_personel.visible()\r\n                        rvMultipleSelect(response.body())\r\n                    }\r\n                } else {\r\n                    Toast.makeText(this@ChoosePersonelActivity, R.string.error, Toast.LENGTH_SHORT)\r\n                        .show()\r\n                    rl_no_data.visible()\r\n                    rl_pb.gone()\r\n                    rv_list_choose_personel.gone()\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun rvMultipleSelect(list: ArrayList<PersonelMinResp>?) {\r\n        rv_list_choose_personel.layoutManager =\r\n            LinearLayoutManager(this, LinearLayoutManager.VERTICAL, false)\r\n        adapterPersonelMultiple = list?.let { PersonelMultipleAdapter(this, it) }!!\r\n        rv_list_choose_personel.adapter = adapterPersonelMultiple\r\n\r\n        tracker = SelectionTracker.Builder<PersonelMinResp>(\r\n            \"personelSelection\",\r\n            rv_list_choose_personel,\r\n            PersonelItemKeyProvider(adapterPersonelMultiple),\r\n            PersonelDetailsLookup(rv_list_choose_personel),\r\n            StorageStrategy.createParcelableStorage(PersonelMinResp::class.java)\r\n        ).withSelectionPredicate(\r\n            SelectionPredicates.createSelectAnything()\r\n        ).build()\r\n        adapterPersonelMultiple.tracker = tracker\r\n        tracker?.addObserver(\r\n            object : SelectionTracker.SelectionObserver<Long>() {\r\n                override fun onSelectionChanged() {\r\n                    super.onSelectionChanged()\r\n                    tracker?.let {\r\n                        selectedPersonel = it.selection.toMutableList()\r\n//                        selection = it.selection.toMutableList()\r\n//                        selevted = it.selection.toMutableList()\r\n                        Log.e(\"personelMultiple\", \"$selectedPersonel\")\r\n//                        Log.e(\"personelMultiple\", \"$selection\")\r\n//                        Log.e(\"selevted\", \"$selevted\")\r\n                        if(selectedPersonel.isEmpty()){\r\n                            actionMode?.finish()\r\n                        }else{\r\n                            if(actionMode == null)actionMode=startSupportActionMode(this@ChoosePersonelActivity)\r\n                            actionMode?.title = \"${selectedPersonel.size}\"\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        )\r\n\r\n        btn_chose_personel.setOnClickListener {\r\n            val intent = Intent().apply {\r\n                this.putExtra(DATA_MULTIPLE, selectedPersonel as ArrayList<AllPersonelModel>)\r\n//                this.putExtra(DATA_MULTIPLE, ArrayList(selection))\r\n            }\r\n            setResult(AddGelarActivity.RES_PESERTA, intent)\r\n            finish()\r\n        }\r\n    }\r\n\r\n    override fun onCreateOptionsMenu(menu: Menu?): Boolean {\r\n        menuInflater.inflate(R.menu.search_bar, menu)\r\n        val item = menu?.findItem(R.id.action_search)\r\n        val searchView = item?.actionView as SearchView\r\n        searchView.queryHint = \"Cari Nama / NRP\"\r\n\r\n        searchView.setOnQueryTextListener(object : SearchView.OnQueryTextListener {\r\n            override fun onQueryTextSubmit(query: String?): Boolean {\r\n                return false\r\n            }\r\n\r\n            override fun onQueryTextChange(newText: String?): Boolean {\r\n                personelChooseAdapter.filter.filter(newText)\r\n                adapterPersonelMultiple.filter.filter(newText)\r\n                return true\r\n            }\r\n\r\n        })\r\n        return super.onCreateOptionsMenu(menu)\r\n    }\r\n\r\n    override fun onActionItemClicked(mode: ActionMode?, item: MenuItem?): Boolean {\r\n        when (item?.itemId) {\r\n            R.id.action_view_list ->{\r\n                val listNamaPers = ArrayList<String>()\r\n                for(i in 0 until selectedPersonel.size){\r\n                    selectedPersonel[i].nama?.let { listNamaPers.add(it) }\r\n                }\r\n                Toast.makeText(this, \"$listNamaPers\", Toast.LENGTH_SHORT).show()\r\n            }\r\n        }\r\n        return true\r\n    }\r\n\r\n    override fun onCreateActionMode(mode: ActionMode?, menu: Menu?): Boolean {\r\n        mode?.let {\r\n            val inflater: MenuInflater = it.menuInflater\r\n            inflater.inflate(R.menu.action_mode_menu, menu)\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    override fun onPrepareActionMode(mode: ActionMode?, menu: Menu?): Boolean {\r\n        return true\r\n    }\r\n\r\n    override fun onDestroyActionMode(mode: ActionMode?) {\r\n        adapterPersonelMultiple.tracker?.clearSelection()\r\n        adapterPersonelMultiple.notifyDataSetChanged()\r\n        actionMode = null\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/id/calocallo/sicape/ui/main/choose/ChoosePersonelActivity.kt	(revision a7fcd6281606177d1251518751e403a5535497eb)
+++ app/src/main/java/id/calocallo/sicape/ui/main/choose/ChoosePersonelActivity.kt	(date 1614044450661)
@@ -230,7 +230,7 @@
         ).build()
         adapterPersonelMultiple.tracker = tracker
         tracker?.addObserver(
-            object : SelectionTracker.SelectionObserver<Long>() {
+            object : SelectionTracker.SelectionObserver<PersonelMinResp>() {
                 override fun onSelectionChanged() {
                     super.onSelectionChanged()
                     tracker?.let {
Index: app/src/main/java/id/calocallo/sicape/ui/main/lp/pasal/PasalMultipleAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/id/calocallo/sicape/ui/main/lp/pasal/PasalMultipleAdapter.kt	(date 1614050111215)
+++ app/src/main/java/id/calocallo/sicape/ui/main/lp/pasal/PasalMultipleAdapter.kt	(date 1614050111215)
@@ -0,0 +1,223 @@
+package id.calocallo.sicape.ui.main.lp.pasal
+
+import android.content.Context
+import android.util.Log
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import android.widget.Filter
+import android.widget.Filterable
+import androidx.recyclerview.selection.ItemDetailsLookup
+import androidx.recyclerview.selection.SelectionTracker
+import androidx.recyclerview.widget.RecyclerView
+import id.calocallo.sicape.R
+import id.calocallo.sicape.network.response.PasalResp
+import id.calocallo.sicape.utils.ext.gone
+import id.calocallo.sicape.utils.ext.visible
+import kotlinx.android.synthetic.main.activity_detail_lhp.view.*
+import kotlinx.android.synthetic.main.layout_1_text_clickable.view.*
+import java.util.*
+import kotlin.collections.ArrayList
+
+/*
+class PasalMultipleAdapter internal constructor(
+    private val context: Context,
+    private val pasalResp: ArrayList<PasalResp>
+) : RecyclerView.Adapter<PasalMultipleAdapter.PasalHolder>(), Filterable {
+
+    private val inflater: LayoutInflater = LayoutInflater.from(context)
+    var tracker: SelectionTracker<PasalResp>? = null
+    var filterList = ArrayList<PasalResp>()
+
+    init {
+        filterList = pasalResp
+    }
+
+    inner class PasalHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
+        private val txtPasal = itemView.findViewById<TextView>(R.id.txt_1_clickable)
+        fun getItemDetails(): ItemDetailsLookup.ItemDetails<PasalResp> =
+            object : ItemDetailsLookup.ItemDetails<PasalResp>() {
+                override fun getPosition(): Int = adapterPosition
+                override fun getSelectionKey(): PasalResp = filterList[position]
+            }
+
+        fun setPasal(pasalResp: PasalResp, selected: Boolean) {
+            with(itemView) {
+                this.txt_1_clickable.text = pasalResp.nama_pasal
+//                txtPasal.text = pasalResp.nama_pasal
+                this.isActivated = selected
+                if (selected) {
+                    this.txt_1_clickable.setTextColor(Color.WHITE)
+//                    this.img_clickable.visible()
+//                    selected == false
+                } else {
+//                    this.img_clickable.gone()
+                    this.txt_1_clickable.setTextColor(Color.BLACK)
+                }
+            }
+        }
+    }
+
+    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): PasalHolder {
+        val itemView = inflater.inflate(R.layout.layout_1_text_clickable, parent, false)
+        return PasalHolder(itemView)
+    }
+
+    override fun getItemCount(): Int {
+        return filterList.size
+    }
+
+    override fun onBindViewHolder(holder: PasalHolder, position: Int) {
+        tracker?.let {
+            holder.setPasal(filterList[position], it.isSelected(filterList[position]))
+        }
+    }
+
+    fun getItem(position: Int): PasalResp = filterList[position]
+
+    fun getPosition(name: String) = filterList.indexOfFirst { it.nama_pasal == name }
+    override fun getFilter(): Filter {
+        return object : Filter() {
+            override fun performFiltering(constraint: CharSequence?): FilterResults {
+                val charSearch = constraint.toString()
+                if (charSearch.isEmpty()) {
+                    filterList = pasalResp
+                } else {
+                    val resultList = ArrayList<PasalResp>()
+                    for (row in pasalResp) {
+                        if (row.toString().toLowerCase(Locale.ROOT).contains(
+                                charSearch.toString().toLowerCase(
+                                    Locale.ROOT
+                                )
+                            )
+                        ) {
+                            resultList.add(row)
+                        }
+                    }
+                    filterList = resultList
+                }
+                val filterResults = FilterResults()
+                filterResults.values = filterList
+                return filterResults
+            }
+
+            override fun publishResults(constraint: CharSequence?, results: FilterResults?) {
+                filterList = results?.values as ArrayList<PasalResp>
+                notifyDataSetChanged()
+            }
+
+        }
+    }
+}*/
+
+class PasalMultipleAdapter internal constructor(
+    private val context: Context,
+    private val pasal: ArrayList<PasalResp>
+) : RecyclerView.Adapter<PasalMultipleAdapter.PasalMultipleHolder>(), Filterable {
+    private val inflater: LayoutInflater = LayoutInflater.from(context)
+    private var filterable: Boolean = false
+    var tracker: SelectionTracker<PasalResp>? = null
+    var filterList = ArrayList<PasalResp>()
+
+    init {
+        filterList = pasal
+    }
+
+    inner class PasalMultipleHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
+        fun getItemDetails(): ItemDetailsLookup.ItemDetails<PasalResp> =
+            object : ItemDetailsLookup.ItemDetails<PasalResp>() {
+                override fun getPosition(): Int = adapterPosition
+                override fun getSelectionKey(): PasalResp = filterList[position]
+            }
+
+        fun setPasal(pasalResp: PasalResp, selected: Boolean) {
+            with(itemView) {
+
+                /*txt_personel_nama_choose.text = allPersonelModel.nama
+                txt_personel_pangkat_choose.text = allPersonelModel.pangkat.toString().toUpperCase()
+                txt_personel_nrp_choose.text = allPersonelModel.nrp
+                txt_personel_jabatan_choose.text = allPersonelModel.jabatan
+                txt_personel_kesatuan_choose.text = allPersonelModel.satuan_kerja?.kesatuan
+                Log.e("selected", "$selected")*/
+                this.isActivated = selected
+                txt_1_clickable.text = pasalResp.nama_pasal
+                if (this.isActivated) {
+                    /* img_choose_personel.visible()*/
+                    this.img_clickable.visible()
+                } else {
+                    this.img_clickable.gone()
+                    /* img_choose_personel.gone()*/
+                }
+                Log.e("selected2", "$selected")
+            }
+
+        }
+
+    }
+
+
+    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): PasalMultipleHolder {
+        val view = inflater.inflate(R.layout.layout_1_text_clickable, parent, false)
+        return PasalMultipleHolder(view)
+    }
+
+    override fun getItemCount(): Int {
+        return filterList.size
+    }
+
+    override fun onBindViewHolder(holder: PasalMultipleHolder, position: Int) {
+        tracker?.isSelected(filterList[position])?.let { holder.setPasal(filterList[position], it) }
+    }
+
+    fun getItem(position: Int): PasalResp = filterList[position]
+
+    fun getPosition(nama: String) = filterList.indexOfFirst { it.nama_pasal == nama }
+    override fun getFilter(): Filter {
+        return object : Filter() {
+            override fun performFiltering(constraint: CharSequence?): FilterResults {
+                val charSearch = constraint.toString()
+                if (charSearch.isEmpty()) {
+                    filterList = pasal
+                } else {
+                    val resultList = ArrayList<PasalResp>()
+                    for (row in pasal) {
+                        if (row.toString().toLowerCase(Locale.ROOT)
+                                .contains(charSearch.toLowerCase(Locale.ROOT))
+                        ) {
+                            resultList.add(row)
+                        }
+                    }
+                    filterList = resultList
+                }
+                val filterResults = FilterResults()
+                filterResults.values = filterList
+                return filterResults
+            }
+            /*override fun performFiltering(constraint: CharSequence?): FilterResults {
+                val search = constraint?.toString()
+                if(search?.isEmpty()!!){
+                    filterList = personel
+                }else{
+                    val resultList = ArrayList<AllPersonelModel>()
+                    for(row in personel){
+                        if(row.toString().toLowerCase(Locale.ROOT)
+                                .contains(search.toLowerCase(Locale.ROOT))){
+                            resultList.add(row)
+                        }
+                        filterList = resultList
+                    }
+                    val filterResult = FilterResults()
+                    filterResult.values = filterList
+                    return filterResult
+                }
+            }*/
+
+            @Suppress("UNCHECKED_CAST")
+            override fun publishResults(constraint: CharSequence?, results: FilterResults?) {
+                filterList = results?.values as ArrayList<PasalResp>
+                notifyDataSetChanged()
+            }
+
+        }
+    }
+}
\ No newline at end of file
Index: app/src/main/java/id/calocallo/sicape/ui/main/lp/saksi/PickSaksiLpActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package id.calocallo.sicape.ui.main.lp.saksi\r\n\r\nimport android.content.Intent\r\nimport android.graphics.Color\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android.os.Looper\r\nimport android.util.Log\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.recyclerview.selection.SelectionPredicates\r\nimport androidx.recyclerview.selection.SelectionTracker\r\nimport androidx.recyclerview.selection.StorageStrategy\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport com.github.razir.progressbutton.*\r\nimport id.calocallo.sicape.R\r\nimport id.calocallo.sicape.network.request.LpKkeReq\r\nimport id.calocallo.sicape.network.request.LpPidanaReq\r\nimport id.calocallo.sicape.network.response.LpSaksiResp\r\nimport id.calocallo.sicape.ui.main.lp.pidana.tes.SelectedSaksiAdapter\r\nimport id.calocallo.sicape.ui.main.lp.pidana.tes.SelectedSaksiDetailsLookup\r\nimport id.calocallo.sicape.ui.main.lp.pidana.tes.SelectedSaksiItemKeyProvider\r\nimport id.calocallo.sicape.utils.SessionManager1\r\nimport id.co.iconpln.smartcity.ui.base.BaseActivity\r\nimport kotlinx.android.synthetic.main.activity_pick_saksi_lp.*\r\nimport kotlinx.android.synthetic.main.layout_toolbar_white.*\r\n\r\nclass PickSaksiLpActivity : BaseActivity() {\r\n    companion object{\r\n        const val ID_PELAPOR_SAKSI = \"JENIS_LP_SAKSI\"\r\n    }\r\n    private lateinit var sessionManager1: SessionManager1\r\n    private lateinit var adapterSaksiLp: SelectedSaksiAdapter\r\n    private var lpPidanaReq = LpPidanaReq()\r\n    private var lpKKeReq = LpKkeReq()\r\n    private var selectedSaksi: MutableList<LpSaksiResp> = mutableListOf()\r\n    private var tracker: SelectionTracker<LpSaksiResp>? = null\r\n   /* private var listSaksi = arrayListOf(\r\n        LpSaksiResp(1, \"Utuh\", \"\", \"\", \"\",\"\",1,\"\",\"\",\"\"),\r\n        LpSaksiResp(2, \"Galuh\", \"\", \"\", \"\",\"\" ,0,\"\",\"\",\"\"),\r\n        LpSaksiResp(3, \"Dulak\", \"\", \"\", \"\",\"\",0,\"\",\"\",\"\")\r\n    )*/\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_pick_saksi_lp)\r\n        sessionManager1 = SessionManager1(this)\r\n//        adapterSaksiLp = ReusableAdapter(this)\r\n        setupActionBarWithBackButton(toolbar)\r\n//        supportActionBar?.title = \"Pilih Saksi\"\r\n        when (sessionManager1.getJenisLP()) {\r\n            \"pidana\" -> {\r\n                supportActionBar?.title = \"Tambah Data Laporan Pidana\"\r\n            }\r\n            \"disiplin\" -> {\r\n                supportActionBar?.title = \"Tambah Data Laporan Disiplin\"\r\n            }\r\n            \"kode_etik\" -> supportActionBar?.title = \"Tambah Data Laporan Kode Etik\"\r\n        }\r\n        val idPelaporSaksi = intent.extras?.getInt(ID_PELAPOR_SAKSI)\r\n        getSaksiLp()\r\n\r\n        btn_add_single_saksi.setOnClickListener {\r\n            startActivity(Intent(this, AddSaksiLpActivity::class.java))\r\n        }\r\n        bindProgressButton(btn_save_lp_add)\r\n        btn_save_lp_add.attachTextChangeAnimator()\r\n        btn_save_lp_add.setOnClickListener {\r\n            sessionManager1.setListSaksiLP(selectedSaksi as ArrayList<LpSaksiResp>)\r\n            addAllLp(sessionManager1.getJenisLP(), idPelaporSaksi)\r\n\r\n            val animatedDrawable = ContextCompat.getDrawable(this, R.drawable.animated_check)!!\r\n            val drawableSize = resources.getDimensionPixelSize(R.dimen.space_25dp)\r\n            animatedDrawable.setBounds(0, 0, drawableSize, drawableSize)\r\n\r\n            btn_save_lp_add.showProgress {\r\n                progressColor = Color.WHITE\r\n            }\r\n            btn_save_lp_add.showDrawable(animatedDrawable) {\r\n                buttonTextRes = R.string.data_saved\r\n                textMarginRes = R.dimen.space_10dp\r\n            }\r\n            Handler(Looper.getMainLooper()).postDelayed({\r\n                btn_save_lp_add.hideDrawable(R.string.data_saved)\r\n            }, 3000)\r\n        }\r\n    }\r\n\r\n    private fun addAllLp(jenisLP: String?, idPelaporSaksi: Int?) {\r\n        when (jenisLP) {\r\n            \"kode_etik\" -> {\r\n//                lpKKeReq.no_lp = sessionManager1.getNoLP()\r\n//                lpKKeReq.id_personel_operator = sessionManager.fetchUser()?.id\r\n                lpKKeReq.uraian_pelanggaran = jenisLP\r\n                lpKKeReq.kota_buat_laporan = sessionManager1.getKotaBuatLp()\r\n                lpKKeReq.tanggal_buat_laporan = sessionManager1.getTglBuatLp()\r\n                lpKKeReq.id_personel_terlapor = sessionManager1.getIDPersonelTerlapor()\r\n                lpKKeReq.id_personel_pelapor = idPelaporSaksi\r\n//                lpKKeReq.id_sipil_pelapor = sessionManager.getIdSipilPelapor()\r\n                lpKKeReq.nama_yang_mengetahui = sessionManager1.getNamaPimpBidLp()\r\n                lpKKeReq.pangkat_yang_mengetahui = sessionManager1.getPangkatPimpBidLp()\r\n                lpKKeReq.nrp_yang_mengetahui = sessionManager1.getNrpPimpBidLp()\r\n                lpKKeReq.jabatan_yang_mengetahui = sessionManager1.getJabatanPimpBidLp()\r\n                lpKKeReq.alat_bukti = sessionManager1.getAlatBukiLP()\r\n                lpKKeReq.isi_laporan = sessionManager1.getIsiLapLP()\r\n                lpKKeReq.uraian_pelanggaran = sessionManager1.getUraianPelanggaranLP()\r\n                lpKKeReq.pasal_dilanggar = sessionManager1.getListPasalLP()\r\n//                lpKKeReq.saksi_kode_etik = selectedSaksi as ArrayList<LpSaksiResp>\r\n\r\n                Log.e(\"KKE\", \"${lpKKeReq}\")\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun getSaksiLp() {\r\n//        NetworkConfig().getService()\r\n        rv_list_saksi.layoutManager = LinearLayoutManager(this, LinearLayoutManager.VERTICAL, false)\r\n//        adapterSaksiLp = SelectedSaksiAdapter(this, listSaksi)\r\n        rv_list_saksi.adapter = adapterSaksiLp\r\n\r\n        tracker = SelectionTracker.Builder<LpSaksiResp>(\r\n            \"saksiSelection\",\r\n            rv_list_saksi,\r\n            SelectedSaksiItemKeyProvider(adapterSaksiLp),\r\n            SelectedSaksiDetailsLookup(rv_list_saksi),\r\n            StorageStrategy.createParcelableStorage(LpSaksiResp::class.java)\r\n        ).withSelectionPredicate(\r\n            SelectionPredicates.createSelectAnything()\r\n        ).build()\r\n        adapterSaksiLp.tracker = tracker\r\n        tracker?.addObserver(\r\n            object : SelectionTracker.SelectionObserver<Long>() {\r\n                override fun onSelectionChanged() {\r\n                    super.onSelectionChanged()\r\n                    tracker?.let {\r\n                        selectedSaksi = it.selection.toMutableList()\r\n                        Log.e(\"idSaksi\", \"$selectedSaksi\")\r\n                    }\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n        getSaksiLp()\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/id/calocallo/sicape/ui/main/lp/saksi/PickSaksiLpActivity.kt	(revision a7fcd6281606177d1251518751e403a5535497eb)
+++ app/src/main/java/id/calocallo/sicape/ui/main/lp/saksi/PickSaksiLpActivity.kt	(date 1614044450655)
@@ -128,7 +128,7 @@
         ).build()
         adapterSaksiLp.tracker = tracker
         tracker?.addObserver(
-            object : SelectionTracker.SelectionObserver<Long>() {
+            object : SelectionTracker.SelectionObserver<LpSaksiResp>() {
                 override fun onSelectionChanged() {
                     super.onSelectionChanged()
                     tracker?.let {
Index: .idea/codeStyles/Project.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><component name=\"ProjectCodeStyleConfiguration\">\r\n  <code_scheme name=\"Project\" version=\"173\">\r\n    <JetCodeStyleSettings>\r\n      <option name=\"CODE_STYLE_DEFAULTS\" value=\"KOTLIN_OFFICIAL\" />\r\n    </JetCodeStyleSettings>\r\n    <codeStyleSettings language=\"XML\">\r\n      <indentOptions>\r\n        <option name=\"CONTINUATION_INDENT_SIZE\" value=\"4\" />\r\n      </indentOptions>\r\n      <arrangement>\r\n        <rules>\r\n          <section>\r\n            <rule>\r\n              <match>\r\n                <AND>\r\n                  <NAME>xmlns:android</NAME>\r\n                  <XML_ATTRIBUTE />\r\n                  <XML_NAMESPACE>^$</XML_NAMESPACE>\r\n                </AND>\r\n              </match>\r\n            </rule>\r\n          </section>\r\n          <section>\r\n            <rule>\r\n              <match>\r\n                <AND>\r\n                  <NAME>xmlns:.*</NAME>\r\n                  <XML_ATTRIBUTE />\r\n                  <XML_NAMESPACE>^$</XML_NAMESPACE>\r\n                </AND>\r\n              </match>\r\n              <order>BY_NAME</order>\r\n            </rule>\r\n          </section>\r\n          <section>\r\n            <rule>\r\n              <match>\r\n                <AND>\r\n                  <NAME>.*:id</NAME>\r\n                  <XML_ATTRIBUTE />\r\n                  <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>\r\n                </AND>\r\n              </match>\r\n            </rule>\r\n          </section>\r\n          <section>\r\n            <rule>\r\n              <match>\r\n                <AND>\r\n                  <NAME>.*:name</NAME>\r\n                  <XML_ATTRIBUTE />\r\n                  <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>\r\n                </AND>\r\n              </match>\r\n            </rule>\r\n          </section>\r\n          <section>\r\n            <rule>\r\n              <match>\r\n                <AND>\r\n                  <NAME>name</NAME>\r\n                  <XML_ATTRIBUTE />\r\n                  <XML_NAMESPACE>^$</XML_NAMESPACE>\r\n                </AND>\r\n              </match>\r\n            </rule>\r\n          </section>\r\n          <section>\r\n            <rule>\r\n              <match>\r\n                <AND>\r\n                  <NAME>style</NAME>\r\n                  <XML_ATTRIBUTE />\r\n                  <XML_NAMESPACE>^$</XML_NAMESPACE>\r\n                </AND>\r\n              </match>\r\n            </rule>\r\n          </section>\r\n          <section>\r\n            <rule>\r\n              <match>\r\n                <AND>\r\n                  <NAME>.*</NAME>\r\n                  <XML_ATTRIBUTE />\r\n                  <XML_NAMESPACE>^$</XML_NAMESPACE>\r\n                </AND>\r\n              </match>\r\n              <order>BY_NAME</order>\r\n            </rule>\r\n          </section>\r\n          <section>\r\n            <rule>\r\n              <match>\r\n                <AND>\r\n                  <NAME>.*</NAME>\r\n                  <XML_ATTRIBUTE />\r\n                  <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>\r\n                </AND>\r\n              </match>\r\n              <order>ANDROID_ATTRIBUTE_ORDER</order>\r\n            </rule>\r\n          </section>\r\n          <section>\r\n            <rule>\r\n              <match>\r\n                <AND>\r\n                  <NAME>.*</NAME>\r\n                  <XML_ATTRIBUTE />\r\n                  <XML_NAMESPACE>.*</XML_NAMESPACE>\r\n                </AND>\r\n              </match>\r\n              <order>BY_NAME</order>\r\n            </rule>\r\n          </section>\r\n        </rules>\r\n      </arrangement>\r\n    </codeStyleSettings>\r\n    <codeStyleSettings language=\"kotlin\">\r\n      <option name=\"CODE_STYLE_DEFAULTS\" value=\"KOTLIN_OFFICIAL\" />\r\n    </codeStyleSettings>\r\n  </code_scheme>\r\n</component>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/codeStyles/Project.xml	(revision a7fcd6281606177d1251518751e403a5535497eb)
+++ .idea/codeStyles/Project.xml	(date 1613972285678)
@@ -1,6 +1,22 @@
 <component name="ProjectCodeStyleConfiguration">
   <code_scheme name="Project" version="173">
     <JetCodeStyleSettings>
+      <option name="PACKAGES_TO_USE_STAR_IMPORTS">
+        <value>
+          <package name="java.util" alias="false" withSubpackages="false" />
+          <package name="kotlinx.android.synthetic" alias="false" withSubpackages="true" />
+          <package name="io.ktor" alias="false" withSubpackages="true" />
+        </value>
+      </option>
+      <option name="PACKAGES_IMPORT_LAYOUT">
+        <value>
+          <package name="" alias="false" withSubpackages="true" />
+          <package name="java" alias="false" withSubpackages="true" />
+          <package name="javax" alias="false" withSubpackages="true" />
+          <package name="kotlin" alias="false" withSubpackages="true" />
+          <package name="" alias="true" withSubpackages="true" />
+        </value>
+      </option>
       <option name="CODE_STYLE_DEFAULTS" value="KOTLIN_OFFICIAL" />
     </JetCodeStyleSettings>
     <codeStyleSettings language="XML">
Index: response/pasal1.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- response/pasal1.kt	(date 1613966651115)
+++ response/pasal1.kt	(date 1613966651115)
@@ -0,0 +1,56 @@
+package id.calocallo.sicape.ui.main.lp.pasal.tes
+
+import android.content.Context
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import android.widget.TextView
+import androidx.recyclerview.selection.ItemDetailsLookup
+import androidx.recyclerview.selection.SelectionTracker
+import androidx.recyclerview.widget.RecyclerView
+import id.calocallo.sicape.network.response.PasalResp
+import id.calocallo.sicape.R
+
+class PasalTesAdapter internal constructor(
+    private val context: Context,
+    private val pasalResp: ArrayList<PasalResp>
+) : RecyclerView.Adapter<PasalTesAdapter.PasalHolder>() {
+
+    private val inflater: LayoutInflater = LayoutInflater.from(context)
+    var tracker: SelectionTracker<PasalResp>? = null
+
+    inner class PasalHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
+        private val txtPasal = itemView.findViewById<TextView>(R.id.txt_1_clickable)
+        fun getItemDetails(): ItemDetailsLookup.ItemDetails<PasalResp> =
+            object : ItemDetailsLookup.ItemDetails<PasalResp>() {
+                override fun getPosition(): Int = adapterPosition
+                override fun getSelectionKey(): PasalResp? = pasalResp[position]
+            }
+
+        fun setPasal(pasalResp: PasalResp, selected: Boolean) {
+            txtPasal.text = pasalResp.nama_pasal
+            itemView.isActivated = selected
+
+        }
+
+    }
+
+    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): PasalHolder {
+        val itemView = inflater.inflate(R.layout.layout_1_text_clickable, parent, false)
+        return PasalHolder(itemView)
+    }
+
+    override fun getItemCount(): Int {
+        return pasalResp.size
+    }
+
+    override fun onBindViewHolder(holder: PasalHolder, position: Int) {
+        tracker?.let {
+            holder.setPasal(pasalResp[position], it.isSelected(pasalResp[position]))
+        }
+    }
+
+    fun getItem(position: Int): PasalResp = pasalResp[position]
+
+    fun getPosition(name: String) = pasalResp.indexOfFirst { it.nama_pasal == name }
+}
\ No newline at end of file
Index: response/pasal2.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- response/pasal2.kt	(date 1613966893049)
+++ response/pasal2.kt	(date 1613966893049)
@@ -0,0 +1,361 @@
+package id.calocallo.sicape.ui.main.lp.pasal
+
+import android.content.Intent
+import android.graphics.Color
+import android.os.Bundle
+import android.os.Handler
+import android.os.Looper
+import android.util.Log
+import android.view.Menu
+import android.view.MenuInflater
+import android.view.MenuItem
+import android.widget.Toast
+import androidx.appcompat.view.ActionMode
+import androidx.appcompat.widget.SearchView
+import androidx.core.content.ContextCompat
+import androidx.recyclerview.selection.SelectionPredicates
+import androidx.recyclerview.selection.SelectionTracker
+import androidx.recyclerview.selection.StorageStrategy
+import androidx.recyclerview.widget.LinearLayoutManager
+import com.github.razir.progressbutton.*
+import com.orhanobut.logger.AndroidLogAdapter
+import com.orhanobut.logger.Logger
+import id.calocallo.sicape.network.response.PasalResp
+import id.calocallo.sicape.ui.main.lp.pasal.tes.PasalTesDetailsLookup
+import id.calocallo.sicape.R
+import id.calocallo.sicape.network.NetworkConfig
+import id.calocallo.sicape.network.request.*
+import id.calocallo.sicape.network.response.Base1Resp
+import id.calocallo.sicape.network.response.DokLpResp
+import id.calocallo.sicape.ui.main.lp.disiplin.ListLpDisiplinActivity
+import id.calocallo.sicape.ui.main.lp.pasal.tes.PasalTesAdapter
+import id.calocallo.sicape.ui.main.lp.pasal.tes.PasalTesItemKeyProvider
+import id.calocallo.sicape.ui.main.lp.saksi.PickSaksiLpActivity.Companion.ID_PELAPOR_SAKSI
+import id.calocallo.sicape.utils.SessionManager1
+import id.calocallo.sicape.utils.hideKeyboard
+import id.co.iconpln.smartcity.ui.base.BaseActivity
+import kotlinx.android.synthetic.main.activity_pick_pasal.*
+import kotlinx.android.synthetic.main.layout_toolbar_white.*
+import retrofit2.Call
+import retrofit2.Callback
+import retrofit2.Response
+
+class PickPasalActivity : BaseActivity(), ActionMode.Callback {
+    private lateinit var sessionManager1: SessionManager1
+    private val listPasal = mutableListOf<PasalResp>()
+    private lateinit var adapterPasalTes: PasalTesAdapter
+    private var selectedIdPasal: MutableList<PasalResp> = mutableListOf()
+    private var tracker: SelectionTracker<PasalResp>? = null
+    private val listIdPasal = ArrayList<ListIdPasalReq>()
+
+    //req
+    private var lpPidanaReq = LpPidanaReq()
+    private var lpKKeReq = LpKkeReq()
+    private var lpDisiplinReq = LpDisiplinReq()
+
+    /*action mode*/
+    private var actionMode: ActionMode? = null
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        setContentView(R.layout.activity_pick_pasal)
+        setupActionBarWithBackButton(toolbar)
+        sessionManager1 = SessionManager1(this)
+        Logger.addLogAdapter(AndroidLogAdapter())
+        hideKeyboard()
+        when (sessionManager1.getJenisLP()) {
+            "pidana" -> {
+                supportActionBar?.title = "Tambah Data Laporan Pidana"
+            }
+            "disiplin" -> {
+                supportActionBar?.title = "Tambah Data Laporan Disiplin"
+            }
+            "kode_etik" -> supportActionBar?.title = "Tambah Data Laporan Kode Etik"
+        }
+        apiPasalAll()
+//        getListPasal(listPasal)
+
+
+        //getSipil if not empty
+        val sipil = intent?.extras?.getParcelable<SipilPelaporReq>(SIPIL)
+
+        val idPelapor = intent.extras?.getInt(ID_PELAPOR)
+        bindProgressButton(btn_save_lp_all)
+        btn_save_lp_all.attachTextChangeAnimator()
+        if (sessionManager1.getJenisLP() == "kode_etik") {
+            btn_save_lp_all.text = getString(R.string.next)
+        }
+        btn_save_lp_all.setOnClickListener {
+
+            for (i in 0 until selectedIdPasal.size) {
+                listIdPasal.add(ListIdPasalReq(selectedIdPasal[i].id))
+            }
+//            Log.e("idPasalOnButton", "$listIdPasal")
+            if (sessionManager1.getJenisLP() != "kode_etik") {
+                addAllLp(sessionManager1.getJenisLP(), idPelapor, sipil)
+            } else {
+                sessionManager1.setListPasalLP(listIdPasal)
+                val intent = Intent(this, PickSaksiActivity::class.java)
+                intent.putExtra(ID_PELAPOR_SAKSI, idPelapor)
+                startActivity(intent)
+                overridePendingTransition(R.anim.slide_in_right, R.anim.slide_out_left)
+            }
+        }
+
+        btn_add_single_pasal.setOnClickListener {
+            val intent = Intent(this, AddPasalActivity::class.java)
+            startActivity(intent)
+            overridePendingTransition(R.anim.slide_in_right, R.anim.slide_out_left)
+        }
+        /*searchView*/
+        searchView()
+
+
+    }
+
+    private fun searchView() {
+        search_pasal_pick.setOnQueryTextListener(object : SearchView.OnQueryTextListener {
+            override fun onQueryTextSubmit(query: String?): Boolean {
+                return false
+            }
+
+            override fun onQueryTextChange(newText: String?): Boolean {
+                adapterPasalTes.filter.filter(newText)
+                return true
+            }
+
+        })
+    }
+
+    private fun apiPasalAll() {
+        NetworkConfig().getServLp().getAllPasal("Bearer ${sessionManager1.fetchAuthToken()}")
+            .enqueue(object :
+                Callback<ArrayList<PasalResp>> {
+                override fun onFailure(call: Call<ArrayList<PasalResp>>, t: Throwable) {
+                    Toast.makeText(this@PickPasalActivity, "Error Konekisi", Toast.LENGTH_SHORT)
+                        .show()
+                }
+
+                override fun onResponse(
+                    call: Call<ArrayList<PasalResp>>,
+                    response: Response<ArrayList<PasalResp>>
+                ) {
+                    if (response.isSuccessful) {
+                        getListPasal(response.body() as ArrayList<PasalResp>)
+                    } else {
+                        Toast.makeText(this@PickPasalActivity, "Error Konekisi", Toast.LENGTH_SHORT)
+                            .show()
+                    }
+                }
+            })
+    }
+
+    private fun getListPasal(listPasal: MutableList<PasalResp>) {
+        rv_list_pasal_2.layoutManager =
+            LinearLayoutManager(this, LinearLayoutManager.VERTICAL, false)
+        adapterPasalTes = PasalTesAdapter(this, listPasal as ArrayList<PasalResp>)
+        rv_list_pasal_2.adapter = adapterPasalTes
+
+        tracker = SelectionTracker.Builder<PasalResp>(
+            "pasalSelection",
+            rv_list_pasal_2,
+            PasalTesItemKeyProvider(adapterPasalTes),
+            PasalTesDetailsLookup(rv_list_pasal_2),
+            StorageStrategy.createParcelableStorage(PasalResp::class.java)
+        ).withSelectionPredicate(
+            SelectionPredicates.createSelectAnything()
+        ).build()
+        adapterPasalTes.tracker = tracker
+
+        tracker?.addObserver(
+            object : SelectionTracker.SelectionObserver<Long>() {
+                override fun onSelectionChanged() {
+                    super.onSelectionChanged()
+                    tracker?.let {
+                        selectedIdPasal = it.selection.toMutableList()
+                        Log.e("idPasal", "$selectedIdPasal")
+                        if (selectedIdPasal.isEmpty()) {
+                            actionMode?.finish()
+                        } else {
+                            if (actionMode == null) actionMode =
+                                startSupportActionMode(this@PickPasalActivity)
+                            actionMode?.title = " ${selectedIdPasal.size}"
+                        }
+
+                    }
+                }
+            }
+        )
+    }
+
+    private fun addAllLp(jenisLP: String?, idPelapor: Int?, sipil: SipilPelaporReq?) {
+        btn_save_lp_all.showProgress {
+            progressColor = Color.WHITE
+        }
+//        btn_save_lp_all.hideDrawable(R.string.save)
+
+        when (jenisLP) {
+            "pidana" -> {
+//                lpPidanaReq.no_lp = sessionManager1.getNoLP()
+                lpPidanaReq.id_satuan_kerja = 123
+                lpPidanaReq.id_personel_terlapor = sessionManager1.getIDPersonelTerlapor()
+//                lpPidanaReq.id_personel_pelapor = idPelapor
+//                lpPidanaReq.nama_yang_mengetahui = sessionManager1.getNamaPimpBidLp()
+//                lpPidanaReq.pangkat_yang_mengetahui = sessionManager1.getPangkatPimpBidLp()
+//                lpPidanaReq.nrp_yang_mengetahui = sessionManager1.getNrpPimpBidLp()
+//                lpPidanaReq.jabatan_yang_mengetahui = sessionManager1.getJabatanPimpBidLp()
+//                lpPidanaReq.status_pelapor = sessionManager1.getPelapor()
+//                lpPidanaReq.pembukaan_laporan = sessionManager1.getPembukaanLpLP()
+                lpPidanaReq.isi_laporan = sessionManager1.getIsiLapLP()
+                lpPidanaReq.pasal_dilanggar = listIdPasal
+                lpPidanaReq.waktu_buat_laporan = sessionManager1.getWaktuBuatLaporan()
+//                lpPidanaReq.pasal_dilanggar = selectedIdPasal as ArrayList<LpPasalResp>
+                lpPidanaReq.kota_buat_laporan = sessionManager1.getKotaBuatLp()
+                lpPidanaReq.tanggal_buat_laporan = sessionManager1.getTglBuatLp()
+                lpPidanaReq.nama_pelapor = sipil?.nama_sipil
+                lpPidanaReq.agama_pelapor = sipil?.agama_sipil
+                lpPidanaReq.pekerjaan_pelapor = sipil?.pekerjaan_sipil
+                lpPidanaReq.kewarganegaraan_pelapor = sipil?.kewarganegaraan_sipil
+                lpPidanaReq.alamat_pelapor = sipil?.alamat_sipil
+                lpPidanaReq.nik_ktp_pelapor = sipil?.nik_sipil
+                lpPidanaReq.no_telp_pelapor = sipil?.no_telp_sipil
+                lpPidanaReq.jenis_kelamin_pelapor = sipil?.jenis_kelamin
+                lpPidanaReq.tempat_lahir_pelapor = sipil?.tempat_lahir_pelapor
+                lpPidanaReq.tanggal_lahir_pelapor = sipil?.tanggal_lahir_pelapor
+                lpPidanaReq.uraian_pelanggaran = sessionManager1.getUraianPelanggaranLP()
+//                lpPidanaReq.kesatuan_yang_mengetahui = sessionManager1.getKesatuanPimpBidLp()
+                Logger.e("$lpPidanaReq")
+                apiAddLpPidana()
+            }
+            "disiplin" -> {
+                lpDisiplinReq.id_satuan_kerja = 123
+                lpDisiplinReq.waktu_buat_laporan = sessionManager1.getWaktuBuatLaporan()
+                lpDisiplinReq.no_lp = sessionManager1.getNoLP()
+                lpDisiplinReq.uraian_pelanggaran = jenisLP
+//                lpDisiplinReq.id_personel_operator = sessionManager1.fetchUserPersonel()?.id
+                lpDisiplinReq.id_personel_terlapor = sessionManager1.getIDPersonelTerlapor()
+                lpDisiplinReq.kota_buat_laporan = sessionManager1.getKotaBuatLp()
+                lpDisiplinReq.tanggal_buat_laporan = sessionManager1.getTglBuatLp()
+                lpDisiplinReq.nama_yang_mengetahui = sessionManager1.getNamaPimpBidLp()
+                lpDisiplinReq.pangkat_yang_mengetahui = sessionManager1.getPangkatPimpBidLp()
+                lpDisiplinReq.nrp_yang_mengetahui = sessionManager1.getNrpPimpBidLp()
+                lpDisiplinReq.jabatan_yang_mengetahui = sessionManager1.getJabatanPimpBidLp()
+                lpDisiplinReq.id_personel_pelapor = idPelapor
+                lpDisiplinReq.macam_pelanggaran = sessionManager1.getMacamPelanggaranLP()
+                lpDisiplinReq.keterangan_pelapor = sessionManager1.getKetPelaporLP()
+                lpDisiplinReq.kronologis_dari_pelapor = sessionManager1.getKronologisPelapor()
+                lpDisiplinReq.rincian_pelanggaran_disiplin = sessionManager1.getRincianDisiplin()
+                lpDisiplinReq.pasal_dilanggar = listIdPasal
+                lpDisiplinReq.kesatuan_yang_mengetahui = sessionManager1.getKesatuanPimpBidLp()
+                Logger.e("$lpDisiplinReq")
+                apiAddLpDisiplin()
+            }
+        }
+
+    }
+
+    private fun apiAddLpDisiplin() {
+        NetworkConfig().getServLp().addLpDisiplin("Bearer ${sessionManager1.fetchAuthToken()}",lpDisiplinReq).enqueue(object :Callback<Base1Resp<DokLpResp>>{
+            override fun onFailure(call: Call<Base1Resp<DokLpResp>>, t: Throwable) {
+                Toast.makeText(this@PickPasalActivity, R.string.error_conn, Toast.LENGTH_SHORT).show()
+                btn_save_lp_all.hideDrawable(R.string.not_save)
+            }
+
+            override fun onResponse(
+                call: Call<Base1Resp<DokLpResp>>,
+                response: Response<Base1Resp<DokLpResp>>
+            ) {
+                if(response.body()?.message == "Data lp disiplin saved succesfully"){
+                    btn_save_lp_all.hideDrawable(R.string.data_saved)
+                    Handler(Looper.getMainLooper()).postDelayed({
+                       startActivity(Intent(this@PickPasalActivity, ListLpDisiplinActivity::class.java))
+                       finish()
+                    },500)
+                }else{
+                    Toast.makeText(this@PickPasalActivity, R.string.error_conn, Toast.LENGTH_SHORT).show()
+                    btn_save_lp_all.hideDrawable(R.string.not_save)
+                }
+            }
+        })
+    }
+
+    private fun apiAddLpPidana() {
+        NetworkConfig().getServLp()
+            .addLpPidana("Bearer ${sessionManager1.fetchAuthToken()}", lpPidanaReq)
+            .enqueue(object : Callback<Base1Resp<DokLpResp>> {
+                override fun onFailure(call: Call<Base1Resp<DokLpResp>>, t: Throwable) {
+                    Toast.makeText(this@PickPasalActivity, R.string.error_conn, Toast.LENGTH_SHORT)
+                        .show()
+                    btn_save_lp_all.hideDrawable(R.string.not_save)
+                    Log.e("t", "$t")
+                }
+
+                override fun onResponse(
+                    call: Call<Base1Resp<DokLpResp>>,
+                    response: Response<Base1Resp<DokLpResp>>
+                ) {
+                    if (response.body()?.message == "Data lp pidana saved succesfully") {
+                        val animatedDrawable =
+                            ContextCompat.getDrawable(
+                                this@PickPasalActivity,
+                                R.drawable.animated_check
+                            )!!
+                        //Defined bounds are required for your drawable
+                        val drawableSize = resources.getDimensionPixelSize(R.dimen.space_25dp)
+                        animatedDrawable.setBounds(0, 0, drawableSize, drawableSize)
+                        btn_save_lp_all.showDrawable(animatedDrawable) {
+                            buttonTextRes = R.string.data_saved
+                            textMarginRes = R.dimen.space_10dp
+                        }
+                        Handler(Looper.getMainLooper()).postDelayed({
+                            finish()
+                        },500)
+                    } else {
+                        btn_save_lp_all.hideDrawable(R.string.not_save)
+                    }
+                }
+            })
+    }
+
+    companion object {
+        const val ID_PELAPOR = "ID_PELAPOR"
+        const val SIPIL = "SIPIL"
+    }
+
+    override fun onActionItemClicked(mode: ActionMode?, item: MenuItem?): Boolean {
+        when (item?.itemId) {
+            R.id.action_view_list -> {
+                val listNamePasal = ArrayList<String>()
+                for (i in 0 until selectedIdPasal.size) {
+                    selectedIdPasal[i].nama_pasal?.let { listNamePasal.add(it) }
+                }
+                Toast.makeText(this, "$listNamePasal", Toast.LENGTH_SHORT).show()
+            }
+        }
+        return true
+    }
+
+    override fun onCreateActionMode(mode: ActionMode?, menu: Menu?): Boolean {
+        mode?.let {
+            val inflater: MenuInflater = it.menuInflater
+            inflater.inflate(R.menu.action_mode_menu, menu)
+            return true
+        }
+        return false
+    }
+
+    override fun onPrepareActionMode(mode: ActionMode?, menu: Menu?): Boolean {
+        return true
+    }
+
+    override fun onDestroyActionMode(mode: ActionMode?) {
+        adapterPasalTes.tracker?.clearSelection()
+        adapterPasalTes.notifyDataSetChanged()
+        actionMode = null
+    }
+
+    override fun onResume() {
+        super.onResume()
+        apiPasalAll()
+    }
+}
\ No newline at end of file
Index: app/src/main/java/id/calocallo/sicape/utils/ActionBarCallback.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/id/calocallo/sicape/utils/ActionBarCallback.kt	(date 1614052552983)
+++ app/src/main/java/id/calocallo/sicape/utils/ActionBarCallback.kt	(date 1614052552983)
@@ -0,0 +1,28 @@
+package id.calocallo.sicape.utils
+
+import android.content.Context
+import android.view.Menu
+import android.view.MenuItem
+import android.widget.Toast
+import androidx.appcompat.view.ActionMode
+
+class ActionBarCallback(var context: Context) : ActionMode.Callback {
+
+    override fun onActionItemClicked(mode: ActionMode, item: MenuItem): Boolean {
+        Toast.makeText(context, item.toString(), Toast.LENGTH_SHORT).show()
+        //as we no longer have a selection so the actionMode can be finished
+        mode.finish()
+        //we consume the event
+        return true
+    }
+
+    override fun onCreateActionMode(mode: ActionMode, menu: Menu): Boolean {
+        return true
+    }
+
+    override fun onDestroyActionMode(mode: ActionMode) {}
+
+    override fun onPrepareActionMode(mode: ActionMode, menu: Menu): Boolean {
+        return false
+    }
+}
Index: app/src/main/res/layout/layout_1_text_clickable.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"wrap_content\"\r\n    android:id=\"@+id/ll_clickable\"\r\n    android:orientation=\"vertical\"\r\n    android:background=\"@drawable/bg_selected_item\"\r\n    >\r\n\r\n    <RelativeLayout\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\">\r\n\r\n        <TextView\r\n            android:id=\"@+id/txt_1_clickable\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_centerVertical=\"true\"\r\n            android:layout_marginHorizontal=\"@dimen/space_12dp\"\r\n            android:layout_marginVertical=\"@dimen/space_12dp\"\r\n            android:layout_marginTop=\"@dimen/space_8dp\"\r\n            android:text=\"Nama Pendidikan\"\r\n            android:textSize=\"@dimen/space_16dp\"\r\n            android:textStyle=\"bold\" />\r\n\r\n        <ImageView\r\n            android:id=\"@+id/img_clickable\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_alignParentEnd=\"true\"\r\n            android:layout_centerVertical=\"true\"\r\n            android:layout_marginVertical=\"@dimen/space_8dp\"\r\n            android:layout_marginEnd=\"80dp\"\r\n            android:src=\"@drawable/animated_check\"\r\n            android:visibility=\"gone\"\r\n            app:tint=\"@color/colorPrimary\" />\r\n\r\n    </RelativeLayout>\r\n\r\n    <View\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"1dp\"\r\n        android:background=\"@color/gainsboro\">\r\n\r\n    </View>\r\n\r\n\r\n</LinearLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/layout_1_text_clickable.xml	(revision a7fcd6281606177d1251518751e403a5535497eb)
+++ app/src/main/res/layout/layout_1_text_clickable.xml	(date 1614050111207)
@@ -4,9 +4,7 @@
     android:layout_width="match_parent"
     android:layout_height="wrap_content"
     android:id="@+id/ll_clickable"
-    android:orientation="vertical"
-    android:background="@drawable/bg_selected_item"
-    >
+    android:orientation="vertical">
 
     <RelativeLayout
         android:layout_width="match_parent"
diff --git response/pasal1.kt.txt response/pasal1.kt.txt
new file mode 100644
